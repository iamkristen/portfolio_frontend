{"version":3,"file":"static/js/894.3c4048a5.chunk.js","mappings":"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","sources":["components/home/Title.js","components/resume/ResumeTitle.js","components/resume/ResumeCard.js","components/resume/Education.js","components/resume/Skills.js","components/resume/Resume.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Title = ({ title, subTitle }) => {\r\n  return (\r\n    <h1 className=\"font-titleFont font-bold text-xl capitalize text-textColor relative z-10 px-6 py-3 border-b-[1px] border-b-zinc-800 group\">\r\n      <span className=\"text-designColor\">{title}</span> {subTitle}\r\n      <span className=\"w-8 h-8 bg-gradient-to-t from-designColor to-gray-600 inline-block rounded-full absolute left-2 top-3 opacity-10 -z-10 translate-x-0 group-hover:translate-x-24 transition-transform duration-500\"></span>\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst ResumeTitle = ({ icon, title }) => {\r\n  return (\r\n    <h1 className=\"text-lg text-gray-300 uppercase font-medium flex items-center gap-2 py-3 border-b-[1px] border-b-zinc-800\">\r\n      <span className=\"text-designColor text-2xl\">{icon}</span>\r\n      {title}\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default ResumeTitle;\r\n","import React, { useState } from \"react\";\r\n\r\nconst ResumeCard = ({ badge, title, subTitle, des }) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const description = des || \"\"; // Use an empty string if description is undefined\r\n\r\n  const toggleExpansion = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  const truncatedDescription =\r\n    description.length > 0 ? description.slice(0, 100) + \"...\" : description;\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <div className=\"flex items-center\">\r\n        <span className=\"text-gray-500\">{badge}</span>\r\n      </div>\r\n      <div className=\"text-l font-semibold\">{title}</div>\r\n      <div className=\"text-md font-semibold text-gray-500\">{subTitle}</div>\r\n      <p className=\"text-gray-400 mt-2\">\r\n        {isExpanded ? description : truncatedDescription}\r\n        {description.length > 0 && (\r\n          <span onClick={toggleExpansion} className=\"text-white cursor-pointer\">\r\n            {isExpanded ? (\r\n              <>\r\n                <br />\r\n                --- Hide Description ---\r\n              </>\r\n            ) : (\r\n              \"Show Description\"\r\n            )}\r\n          </span>\r\n        )}\r\n      </p>\r\n      <div className=\"w-full border-t border-silver mt-4\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResumeCard;\r\n","import React from \"react\";\r\nimport ResumeTitle from \"./ResumeTitle\";\r\nimport { MdWork } from \"react-icons/md\";\r\nimport { GiGraduateCap } from \"react-icons/gi\";\r\nimport ResumeCard from \"./ResumeCard\";\r\nimport { useEducationData } from \"../../context/education\";\r\nimport { useExperienceData } from \"../../context/experience\";\r\nimport Loader from \"../loader/loader\"; // Import Loader component\r\n\r\nconst Education = () => {\r\n  const { educationData, isLoading: isEducationLoading } = useEducationData();\r\n  const { experienceData, isLoading: isExperienceLoading } =\r\n    useExperienceData();\r\n\r\n  // Show loader if any data is still loading\r\n  if (isEducationLoading || isExperienceLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full grid grid-cols-9 px-6 gap-8\">\r\n      <div className=\"col-span-9 md:col-span-4\">\r\n        <ResumeTitle title=\"Experience\" icon={<MdWork />} />\r\n        {experienceData.length > 0 ? (\r\n          experienceData.map((experience) => (\r\n            <ResumeCard\r\n              key={experience._id}\r\n              badge={experience.timePeriod}\r\n              title={experience.title}\r\n              subTitle={experience.company}\r\n              des={experience.description || \"No description available\"} // Handle undefined description\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No experience data available</p>\r\n        )}\r\n      </div>\r\n      <div className=\"hidden lgl:flex justify-center items-center\">\r\n        <span className=\"w-[1px] h-full bg-zinc-800\"></span>\r\n      </div>\r\n      <div className=\"col-span-9 md:col-span-4\">\r\n        <ResumeTitle title=\"Education\" icon={<GiGraduateCap />} />\r\n        {educationData.length > 0 ? (\r\n          educationData.map((education) => (\r\n            <ResumeCard\r\n              key={education._id}\r\n              badge={education.timePeriod}\r\n              title={education.title}\r\n              subTitle={education.location}\r\n              des={education.description || \"No description available\"} // Handle undefined description\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No education data available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Education;\r\n","import React from \"react\";\r\nimport ResumeTitle from \"./ResumeTitle\";\r\nimport { SiArtstation } from \"react-icons/si\";\r\nimport { FaFlag } from \"react-icons/fa\";\r\nimport { BiCodeAlt } from \"react-icons/bi\";\r\nimport { IoIosPaper } from \"react-icons/io\";\r\nimport { useSkillsData } from \"../../context/skill\";\r\nimport Loader from \"../loader/loader\";\r\n\r\nconst Skills = () => {\r\n  const { skillsData, isLoading } = useSkillsData();\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  const groupedSkills = skillsData.reduce((acc, skill) => {\r\n    acc[skill.type] = acc[skill.type] || [];\r\n    acc[skill.type].push(skill);\r\n    return acc;\r\n  }, {});\r\n\r\n  const typeIcons = {\r\n    Framework: <SiArtstation />,\r\n    Languages: <FaFlag />,\r\n    Coding: <BiCodeAlt />,\r\n    Knowledge: <IoIosPaper />,\r\n  };\r\n\r\n  const renderSkills = (type, skills) => (\r\n    <div key={type} className=\"mb-4\">\r\n      <ResumeTitle title={type} icon={typeIcons[type]} />\r\n      <div className=\"py-2\">\r\n        {skills.map((skill, index) => (\r\n          <div key={skill._id} className={`py-2 ${index !== 0 ? \"mt-2\" : \"\"}`}>\r\n            <p className=\"text-base text-textColor mb-1\">{skill.title}</p>\r\n            <span className=\"w-full bg-gray-600 h-1 inline-flex relative\">\r\n              <span\r\n                style={{\r\n                  width:\r\n                    {\r\n                      Beginner: \"50%\",\r\n                      Intermediate: \"70%\",\r\n                      Advanced: \"85%\",\r\n                      Expert: \"100%\",\r\n                    }[skill.level] || \"0%\",\r\n                }}\r\n                className=\"h-full absolute top-0 left-0 bg-designColor\"\r\n              ></span>\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"w-full px-4\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div className=\"col-span-1\">\r\n          {groupedSkills.Framework &&\r\n            renderSkills(\"Framework\", groupedSkills.Framework)}\r\n          <div className=\"w-full border-t-2 border-gray-300 my-8\"></div>\r\n          {groupedSkills.Knowledge &&\r\n            renderSkills(\"Knowledge\", groupedSkills.Knowledge)}\r\n        </div>\r\n        <div className=\"col-span-1\">\r\n          {groupedSkills.Coding && renderSkills(\"Coding\", groupedSkills.Coding)}\r\n          <div className=\"w-full border-t-2 border-gray-300 my-8\"></div>\r\n          {groupedSkills.Languages &&\r\n            renderSkills(\"Languages\", groupedSkills.Languages)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from \"react\";\r\nimport Title from \"../home/Title\";\r\nimport Education from \"./Education\";\r\nimport Skills from \"./Skills\";\r\n\r\nconst Resume = () => {\r\n  return (\r\n    <section id=\"resume\">\r\n      <Title title=\"My\" subTitle=\"Resume\" />\r\n      <Education />\r\n      <Title title=\"My\" subTitle=\"Skills\" />\r\n      <Skills />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Resume;\r\n"],"names":["_ref","title","subTitle","_jsxs","className","children","_jsx","icon","badge","des","isExpanded","setIsExpanded","useState","description","truncatedDescription","length","slice","onClick","toggleExpansion","_Fragment","Education","educationData","isLoading","isEducationLoading","useEducationData","experienceData","isExperienceLoading","useExperienceData","Loader","ResumeTitle","MdWork","map","experience","ResumeCard","timePeriod","company","_id","GiGraduateCap","education","location","Skills","skillsData","useSkillsData","groupedSkills","reduce","acc","skill","type","push","typeIcons","Framework","SiArtstation","Languages","FaFlag","Coding","BiCodeAlt","Knowledge","IoIosPaper","renderSkills","skills","index","concat","style","width","Beginner","Intermediate","Advanced","Expert","level","Resume","id","Title"],"sourceRoot":""}